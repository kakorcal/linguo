TEMPORARY PLACEHOLDER FILE



form(action="/users?_method=POST" method="POST")
  p What Language are you practicing?
    input(type="text", name="user[practicing]")
  p Where Are You?
    input(type="text", name="user[location]")
  p 
    input(type="submit" value="Find a Partner")


------HTML/JADE------
<script src="http://maps.google.com/maps/api/js?sensor=true"></script>
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>

------SCRIPT.JS----
$(document).ready(function(){
  
function formatLocation()
{
  var geoCoder = new google.maps.Geocoder();
  var $location = $("#location");

  if(!$location.value)
  {
    alert("Some text for if nothing was entered");
    return;
  }

  geoCoder.geocode({address: $location.value, 
                    componentRestrictions: {locality: "San Francisco"}}, 
    (results, status)=>
    {
      if(status == google.maps.GeocoderStatus.OK)
       {
        el.value = (results[0].geometry.location.lat+','+results[0].geometry.location.lng);
        return;
       }
      else 
       { 
         alert("Geocode was not successful for the following reason: " + status);
       }

    })
}
});


------ _editForm.jade -------

--- gender edit ---
div(class='form-group')
  span Gender: &nbsp;
    label(for='Male') Male: &nbsp;
    input(type="radio" id='Male' name="user[gender]" value='')
  span &nbsp; &nbsp;
    label(for='Female') Female: &nbsp;
    input(type="radio" id='Female' name="user[gender]" value='')

--- lang table ---

table
  caption Language Profile
  tr
    th Language
    th Proficiency
    th Intent
      each language in languages
        tr
          td=language.language
          td=language.proficiency
          td=language.approach 
          td
            form(action = "/languages/"+language.id+"?_method=delete" method = "POST")
              input('type' = "submit" value = "Remove")

TODO: Add flash message after a non logged in user tries to message somebody
      edit profile flash - tell user that language pref is required
      
      style index users list
      ensure age field is inputted (has to be done before request is made)
      put request ajax for profile edit -> ensure dom is rendered again
      user can be deleted and cookies are reset
      Style thread page
      truncate timestamp


span Gender: &nbsp;
    label(for='Male') Male: &nbsp;
    input(type="radio" id='Male' name="user[gender]")
span
  label(for='Female') Female: &nbsp;
  input(type="radio" id='Female' name="user[gender]")
span
  label(for='ageInput') Age: &nbsp;
  input(type="number" class='form-control' name="user[age]" value="#{currentUser.age}" id="ageInput" size="6" min="18" max="99")

--- index userslist ---

div(class="list-group")
  h4(class = "list-group-item-heading") #{user.name}
  p(class = "list-group-item-text"): li Description: #{user.description}
  form(action = "/threads" method = "POST")
    input(type = "text" name = "thread[subject]")
    input(type = "text" name = "message[message]")
    input(type = "hidden" name = "message[sender_id]" value = "#{user.id}")
    input(type = "hidden" name = "message[rec_id]" value = "#{user.id}")
    input(type = "submit" value = "Send Message!")

    div(class='profile-head')
      img(src='#{user.img_url}' alt='profile')
      h2 #{user.name} &nbsp;
        if (user.gender)
          span Gender: #{user.gender} &nbsp;
        if (user.age) 
          span Age: #{user.age}
    hr
    div(class='profile-desc')
      h4 Teaching Languages:
      div(class='teaching-languages')
      hr
      h4 Learning Languages:
      div(class='learning-languages')
      hr
      h4 Description: 
      p #{user.description}
      hr
      h4 Location: #{user.location}
      hr
      h4 Member Since: #{user.created_at}
      hr
      h4 Last Login: #{user.updated_at}








      div(class='panel')
        div(class='panel-body')
          div(class='feed')
            div(class='profile-head')
              img(src='#{user.img_url}' alt='profile')
              h2 #{user.name} &nbsp;
                if (user.gender)
                  span Gender: #{user.gender} &nbsp;
                if (user.age) 
                  span Age: #{user.age}
            hr
            div(class='profile-desc')
              h4 Teaching Languages:
              div(class='teaching-languages')
              hr
              h4 Learning Languages:
              div(class='learning-languages')
              hr
              h4 Description: 
              p #{user.description}
              hr
              h4 Location: #{user.location}
              hr
              h4 Last Login: #{user.updated_at}



1. What dependency file does Heroku use to deploy your Node.js app?
  package.json
2. How does Git relate to Heroku?
  git push heroku master
3. How does Heroku associate your repo to its platform?
  When you create an application on Heroku, it associates a new git remote, typically named heroku, with the local git repository for your application.
4. What is a slug?
  A slug is a bundle of your source, fetched dependencies, the language runtime, and compiled/generated output of the build system - ready for execution.
  These slugs are a fundamental aspect of what happens during application execution - they contain your compiled, assembled application - ready to run - together with the instructions (the Procfile) of what you may want to execute.
  Procfiles list process types - named commands that you may want executed
5. What is a dyno?
   Dynos are isolated, virtualized Unix containers, that provide the environment required to run an application.
   Think of a running dyno as a lightweight, secure, virtualized Unix container that contains your application slug in its file system.
6. What is a config variable?
    Config vars contain customizable configuration data that can be changed independently of your source code. The configuration is exposed to a running application via environment variables.
7. What is a release?
  Earlier, this article stated that to run your application on a dyno, the Heroku platform loaded the dyno with your most recent slug. This needs to be refined: in fact it loads it with the slug and any config variables you have assigned to the application. The combination of slug and configuration is called a release.

heroku login
echo 'web: node app.js' > Procfile
heroku run bash
knex migrate: latest


----- script.js -----
// $('.list-group').remove()
// var $listGroup = $("<div/>")
// $listGroup.addClass('list-group');

// data.forEach((el)=>{
  
//   var $h4 = $('<h4/>');
//   $h4.addClass("list-group-item-heading")
//   $h4.text(el.name);
  
//   var $p = $('<p/>')
//   $p.addClass('list-group-item-text')
//   var $li = $('<li/>');
//   $li.text("Description: "+el.description);
//   $p.append($li);
  
//   var $form = $('<form/>');
//   $form.attr("action", "/threads");
//   $form.attr("method", "POST")
  
//   $('<input type = "text" name = "thread[subject]">'+
//     '<input type = "text" name = "message[message]">'+
//     '<input type = "hidden" name = "message[sender_id]" value ='+currentUserID+'>'+
//     '<input type = "hidden" name = "message[rec_id]" value = '+el.id+'>'+
//     '<input type = "submit" value = "Send Message!">').appendTo($form);

//   $($listGroup).append($h4);
//   $($listGroup).append($p);
//   $($listGroup).append($form);

// });

// $($listGroup).insertAfter('.header');

--- build user stars ---

// if(user.learning.length !== 0){
//   user.learning.forEach(cur => {
//     var languageEntry = $('<p></p>');
//     var language = $('<span></span>').text(cur.lang + ' : ');
//     var stars = $('<span class="stars"></span>'); 
//     for(var i = 0; i < 5; i++){
//       var star = $('<i class="fa" aria-hidden="true">');
//       if(cur.prof > i){
//         star.addClass('fa-star');
//       }else{
//         star.addClass('fa-star-o');
//       }
//       stars.append(star);
//     }
//     learningContainer.append('<hr>',
//       languageEntry.append(
//         language, stars
//       )
//     );
//   });
// }


--- logo animation ---

  // LOGO ANIMATION MAYBE

  // var $logo = $('.logo-container');

  // $logo.hover(function(){
  //   $(this).addClass('pulse animated'); 
  // }, function () {
  //     $(this).removeClass('pulse animated');
  // });


--- index.js ---

// var feedContainer = $('.feed');
// var learningContainers = feedContainer.find('.learning-languages');
// var teachingContainers = feedContainer.find('.teaching-languages');
// var feed = JSON.parse($('.json-users').text())
    // .forEach(user => {
        
    // });

// console.log(feed);
// var learningContainer = $('.learning-languages');
// var teachingContainer = $('.teaching-languages');
// var languages = JSON.parse($('.json-languages').text())
//     .forEach(lang => {
//       var languageEntry = $('<p></p>');
//       var language = $('<span></span>').text(lang.language + ' : ');
//       var stars = $('<span class="stars"></span>');
//       var deleteForm = $('<form class="language-delete-form" method="POST"></form>');
//       var deleteBtn = $('<input class="btn btn-danger btn-delete" type="submit" value="REMOVE"/>');
//       deleteForm.attr('action', '/languages/'+lang.id+'?_method=delete');
//       for(var i = 0; i < 5; i++){
//         var star = $('<i class="fa" aria-hidden="true">');
//         if(lang.proficiency > i){
//           star.addClass('fa-star');
//         }else{
//           star.addClass('fa-star-o');
//         }
//         stars.append(star);
//       }
//       if(lang.approach === 'Teaching'){
//         teachingContainer.append('<hr>',
//           languageEntry.append(
//             language, stars, deleteForm.append(deleteBtn)
//           )
//         );
//       }else if (lang.approach === 'Learning'){
//         learningContainer.append('<hr>',
//           languageEntry.append(
//             language, stars, deleteForm.append(deleteBtn)
//           )
//         );
//       }
//     });


// var learningContainer = $('.learning-languages');
// var teachingContainer = $('.teaching-languages');
// var languages = JSON.parse($('.json-languages').text())
//     .forEach(lang => {
//       var languageEntry = $('<p></p>');
//       var language = $('<span></span>').text(lang.language + ' : ');
//       var stars = $('<span class="stars"></span>');
//       var deleteForm = $('<form class="language-delete-form" method="POST"></form>');
//       var deleteBtn = $('<input class="btn btn-danger btn-delete" type="submit" value="REMOVE"/>');
//       deleteForm.attr('action', '/languages/'+lang.id+'?_method=delete');
//       for(var i = 0; i < 5; i++){
//         var star = $('<i class="fa" aria-hidden="true">');
//         if(lang.proficiency > i){
//           star.addClass('fa-star');
//         }else{
//           star.addClass('fa-star-o');
//         }
//         stars.append(star);
//       }
//       if(lang.approach === 'Teaching'){
//         teachingContainer.append('<hr>',
//           languageEntry.append(
//             language, stars, deleteForm.append(deleteBtn)
//           )
//         );
//       }else if (lang.approach === 'Learning'){
//         learningContainer.append('<hr>',
//           languageEntry.append(
//             language, stars, deleteForm.append(deleteBtn)
//           )
//         );
//       }
//     }); 

--- script.js ---

// function buildLanguageObj(usersData)
// {   
//   // Build skeleton obj - adding learning and teaching arrays
//   var current = currentUserID ? currentUserID : -1;
//   var languageObj = usersData.filter(cur => cur.user_id !== +current)
//     .reduce(function(acc, cur){
//       if(!acc[cur.name]){
//         acc[cur.name] = {
//           id: cur.user_id,
//           name: cur.name, 
//           img_url: cur.img_url,
//           gender: cur.gender,
//           age: cur.age,
//           location: cur.location,
//           updated_at: cur.updated_at,
//           description: cur.description,
//           learning: [], 
//           teaching: []
//         }
//       }
//       return acc;
//     }, {});

//     // Push language and proficiency objects to the learning and teaching arrays
//     usersData.forEach(function(cur){
//       //if(languageObj[cur.name]){ --THINK THIS MAY ALWAYS EVALUATE TO TRUE
//         if(cur.approach === 'Learning'){
//           languageObj[cur.name].learning.push({lang: cur.language, prof: cur.proficiency});
//         }
//         if(cur.approach === 'Teaching'){
//           languageObj[cur.name].teaching.push({lang: cur.language, prof: cur.proficiency});
//         }
//      // }
//     });

//     return languageObj;
// }


function buildLanguageObj(usersData)
{   
  // Build skeleton obj - adding learning and teaching arrays
  var current = currentUserID ? currentUserID : -1;
  var languageObj = usersData.filter(cur => cur.user_id !== +current)
    .reduce(function(acc, cur){
      if(!acc[cur.name]){
        acc[cur.name] = {
          id: cur.user_id,
          name: cur.name, 
          img_url: cur.img_url,
          gender: cur.gender,
          age: cur.age,
          location: cur.location,
          updated_at: cur.updated_at,
          description: cur.description,
          learning: [], 
          teaching: []
        }
      }
      return acc;
    }, {});

    // Push language and proficiency objects to the learning and teaching arrays
    usersData.forEach(function(cur){
      //if(languageObj[cur.name]){ --THINK THIS MAY ALWAYS EVALUATE TO TRUE
        if(cur.approach === 'Learning'){
          languageObj[cur.name].learning.push({lang: cur.language, prof: cur.proficiency});
        }
        if(cur.approach === 'Teaching'){
          languageObj[cur.name].teaching.push({lang: cur.language, prof: cur.proficiency});
        }
     // }
    });

    return languageObj;
}

// var languageArray = $.map(buildLanguageObj(usersData), cur => [cur])
//      .forEach(user => {
//         buildUserList(user);
//     }); 

$('.learning-languages').each((idx, elem) => {
  debugger;
  if($(this).text() === ''){
    $(this).hide();
    $(this).prev().hide();
  }
}, elem);

$('.teaching-languages').each((idx, elem) => {
  if($(this).text() === ''){
    $(this).hide();
    $(this).prev().hide();
  }
}, elem);